# 流程控制以及异常处理

**Reference**
> [1] JavaScript Guide: [Control flow and error handling](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling)

## 语句块(Block statement)

最基本的语句是语句块，其用来将一些列语句组合起来。语句块是通过花括号`{}`来与其他语句分隔的。

```js
{
    statement_1;
    statement_2;
    .
    .
    .
    statement_n;
}
```
在流程控制语句中，语句块被大量使用。比如`if`,`for`,`while`等。

```js
while (x < 10) {
    x++;
}
```
**提醒**：在ECMAScript2015之前是没有块作用域的。在语句块中引入的变量具有全局作用域(块不在函数内部)
或者函数作用域(块在函数内部)。在ECMAScript2015之后，若要利用块作用域，需要用关键词`let`对变量进行
声明。用`var`进行声明仍然不是块作用域。
```js
var x = 1;
{
    var x = 2; //不是块作用域
}
console.log(x); // 2

let y = 1;
{
    let y = 2; //块作用域
}
console.log(y); // 1

var z = 1;
{
    let z = 2;  //块作用域
}
console.log(z); // 1
```
这与C或者Java是有很大的不同的。

## 条件语句

JavaScript提供了两种条件语句`if...else`以及`switch`。

### `if...else`语句

`if...else`语句如下所示
```js
if (condition) {
    statement_1;
} else {
    statement_2;
}
```
其基本逻辑为，如果`condition`被判定为`true`，则执行`statement_1`，否则执行`statement_2`。

有时也会使用`else if`来执行多重顺序条件判定：
```js
if (condition_1) {
    statement_1;
} else if (condition_2) {
    statement_2;
} else if (condition_n) {
    statement_n;
} else {
    statement_last;
}
```
这种情况下，只有第一个被判定为`true`的条件下的语句块会被执行。例如，`condition_2`判定为`true`，则只有
`statement_2`会被执行。条件语句是可以嵌套的。

### Falsy values

在JavaScript中，以下值在逻辑运算上下文中会被判定为`false`：
- false
- undefined
- null
- 0
- NaN
- 空字符串：""

所有其他的值，包括所有的object，都会被判定为`true`。这就会出现一个非常有意思的现象：
```js
var b = new Boolean(false);     // 创建一个Boolean对象，该对象的值为false
if (b) {}                       // b 在这里会被判定为true, 因为b是一个object
if (b == false) {}      // 该条件会被判定为true，因为==不检查类型，而b是可以转换为false的
if (b === false) {}     // 该条件会被判定为false，因为===检查类型，b的类型为object，而false的类型为boolean
```
**提醒**：Boolean对象的类型为`object`，而`Boolean.valueOf()`返回的值的类型为`boolean`。
```js
var b = new Boolean(false);
typeof b;                   // "object"
typeof b.valueOf();         // "boolean"
```
**应避免使用Boolean对象！**

### `switch`语句

`switch`语句的形式如下所示：
```js
switch (expression) {
    case label_1:
        statements_1;
        [break;]
    case label_2:
        statements_2;
        [break;]
        ...
    default:
        statements_def;
        [break;]
}
```
`switch`的逻辑是先计算`expression`的值，然后将这个值与`case`列表中的`label`比对，如果`expression`和
`case`中的值一致，则执行该`case`下的语句，直到遇到`break`语句。也就是说如果该`case`下没有`break`语句，
则会接着执行下一个`case`下的语句，直到遇到`break`为止。若`expression`没有与任一个`label`相等，则执行
`default`下对应的语句块。若没有提供`default`，则`switch`中的语句不会得到执行。例如：
```js
switch (fruittype) {
  case 'Oranges':
    console.log('Oranges are $0.59 a pound.');
    break;
  case 'Apples':
    console.log('Apples are $0.32 a pound.');
    break;
  case 'Bananas':
    console.log('Bananas are $0.48 a pound.');
    break;
  case 'Cherries':
    console.log('Cherries are $3.00 a pound.');
    break;
  case 'Mangoes':
    console.log('Mangoes are $0.56 a pound.');
    break;
  case 'Papayas':
    console.log('Mangoes and papayas are $2.79 a pound.');
    break;
  default:
   console.log('Sorry, we are out of ' + fruittype + '.');
}
console.log("Is there anything else you'd like?");
```
## 异常处理语句

















